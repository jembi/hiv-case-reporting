input {
  http {
    port => 5077
  }
}

filter {
  split {}

  csv {
    autodetect_column_names => true
    skip_header => true
  }

  de_dot {
    nested => true
  }

  # enrichment for registration
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-organization"
    query => "resource.identifier.value:%{[registration][facilityCode]}"
    fields => {
      "[resource][address]" => "[@metadata][address]"
      "[resource][name]" => "[registration][facility][name]"
      "[resource][identifier]" => "[@metadata][identifier]"
    }
    add_field => {
      "[registration][facility][country]" => "%{[@metadata][address][0][country]}"
      "[registration][facility][state]" => "%{[@metadata][address][0][state]}"
      "[registration][facility][district]" => "%{[@metadata][address][0][district]}"
      "[registration][facility][city]" => "%{[@metadata][address][0][city]}"
    }
  }

  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-location"
    query => "resource.identifier.value:%{[registration][facilityCode]}"
    fields => {
      "[resource][position]" => "[registration][facility][position]"
    }
  }

  mutate {
    rename => {
      "[registration][facility][position][latitude]" => "[registration][facility][position][lat]"
      "[registration][facility][position][longitude]" => "[registration][facility][position][lon]"
    }
  }

  # enrichment for entry to care
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-organization"
    query => "resource.identifier.value:%{[entryToCare][facilityCode]}"
    fields => {
      "[resource][address]" => "[@metadata][address]"
      "[resource][name]" => "[entryToCare][facility][name]"
      "[resource][identifier]" => "[@metadata][identifier]"
    }
    add_field => {
      "[entryToCare][facility][country]" => "%{[@metadata][address][0][country]}"
      "[entryToCare][facility][state]" => "%{[@metadata][address][0][state]}"
      "[entryToCare][facility][district]" => "%{[@metadata][address][0][district]}"
      "[entryToCare][facility][city]" => "%{[@metadata][address][0][city]}"
    }
  }

  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-location"
    query => "resource.identifier.value:%{[entryToCare][facilityCode]}"
    fields => {
      "[resource][position]" => "[entryToCare][facility][position]"
    }
  }

  mutate {
    rename => {
      "[entryToCare][facility][position][latitude]" => "[entryToCare][facility][position][lat]"
      "[entryToCare][facility][position][longitude]" => "[entryToCare][facility][position][lon]"
    }
  }

  # enrichment for hiv diagnosis
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-organization"
    query => "resource.identifier.value:%{[hivDiagnosis][hivPosFacilityCode]}"
    fields => {
      "[resource][address]" => "[@metadata][address]"
      "[resource][name]" => "[hivDiagnosis][facility][name]"
      "[resource][identifier]" => "[@metadata][identifier]"
    }
    add_field => {
      "[hivDiagnosis][facility][country]" => "%{[@metadata][address][0][country]}"
      "[hivDiagnosis][facility][state]" => "%{[@metadata][address][0][state]}"
      "[hivDiagnosis][facility][district]" => "%{[@metadata][address][0][district]}"
      "[hivDiagnosis][facility][city]" => "%{[@metadata][address][0][city]}"
    }
  }

  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    user => "elastic"
    password => "dev_password_only"
    index => "fhir-raw-location"
    query => "resource.identifier.value:%{[hivDiagnosis][hivPosFacilityCode]}"
    fields => {
      "[resource][position]" => "[hivDiagnosis][facility][position]"
    }
  }

  mutate {
    rename => {
      "[hivDiagnosis][facility][position][latitude]" => "[hivDiagnosis][facility][position][lat]"
      "[hivDiagnosis][facility][position][longitude]" => "[hivDiagnosis][facility][position][lon]"
    }
  }

  # create FHIR patient for CR
  ruby {
    code => '
      event.set("[@metadata][fhirPatient][resourceType]", "Patient")
      event.set("[@metadata][fhirPatient][identifier]", [
        {"system" => "https://instantopenhie.org/client1", "value" => event.get("[registration][clientSourceId]")},
        {"system" => "http://openhie.org/fhir/hiv-casereporting/identifier/nid", "value" => event.get("[registration][NID]")}
      ])
      event.set("[@metadata][fhirPatient][active]", true)
      event.set("[@metadata][fhirPatient][name]", [{"use" => "official", "family" => event.get("[registration][lastName]"), "given" => [event.get("[registration][firstName]")]}])
      event.set("[@metadata][fhirPatient][gender]", event.get("[registration][gender]"))
      event.set("[@metadata][fhirPatient][birthDate]", event.get("[registration][birthDate]"))
      event.set("[@metadata][fhirPatient][address]", [event.get("[registration][address]")])
      event.set("[@metadata][fhirPatient][telecom]", [{"system" => "phone", "value" => event.get("[registration][tel]")}])
    '
  }

  # submit patient to CR
  http {
    body => "%{[@metadata][fhirPatient]}"
    body_format => "json"
    verb => "POST"
    url => "http://opencr:3000/fhir/Patient"
    headers => {
      "Content-Type" => "application/fhir+json"
      "X-OpenHIM-ClientID" => "test"
    }
    target_headers => "[@metadata][crResHeaders]"
  }

  mutate {
    gsub => [ "[@metadata][crResHeaders][location]", "Patient/", "" ]
    gsub => [ "[@metadata][crResHeaders][locationcruid]", "Patient/", "" ]
  }

  mutate {
    add_field => {
      "[@metadata][id]" => "report-patient-%{[@metadata][crResHeaders][location]}"
    }
  }

  fingerprint {
    source => "[@metadata][crResHeaders][locationcruid]"
    target => "[registration][golden_id_fingerprint]"
  }

  # extract nested properties
  mutate {
    split => { "[cd4][collectionDate]" => "|" }
    split => { "[cd4][result]" => "|" }
    split => { "[cd4][percentage]" => "|" }
    split => { "[artRegimenSwitch][date]" => "|" }
    split => { "[artRegimenSwitch][line]" => "|" }
    split => { "[artRegimenSwitch][regimen]" => "|" }
    split => { "[viralSuppression][date]" => "|" }
    split => { "[viralSuppression][result]" => "|" }
    split => { "[viralSuppression][interpretation]" => "|" }
  }

  ruby {
    code => '
      cd4 = []
      initialCD4 = nil
      initialCD4Date = nil
      currentCD4 = nil
      currentCD4Date = nil
      cd4CollectionDate = event.get("[cd4][collectionDate]")
      return if cd4CollectionDate.nil?
      cd4CollectionDate.each_with_index { |val, index|
        obj = { "collectionDate" => val, "result" => event.get("[cd4][result][#{index}]"), "percentage" => event.get("[cd4][percentage][#{index}]") }
        cd4 << obj
        if (initialCD4Date.nil? || initialCD4Date > val)
          initialCD4Date = val
          initialCD4 = obj
        end
        if (currentCD4Date.nil? || currentCD4Date < val)
          currentCD4Date = val
          currentCD4 = obj
        end
      }
      event.set("[cd4][nested]", cd4)
      event.set("[cd4][initial]", initialCD4)
      event.set("[cd4][current]", currentCD4)
    '
    remove_field => [ "[cd4][collectionDate]", "[cd4][result]", "[cd4][percentage]" ]
  }

  ruby {
    code => '
      artRegimenSwitch = []
      initialArtRegimenSwitch = nil
      initialArtRegimenSwitchDate = nil
      currentArtRegimenSwitch = nil
      currentArtRegimenSwitchDate = nil
      artRegimenSwitchDate = event.get("[artRegimenSwitch][date]")
      return if artRegimenSwitchDate.nil?
      artRegimenSwitchDate.each_with_index { |val, index|
        obj = { "date" => val, "line" => event.get("[artRegimenSwitch][line][#{index}]"), "regimen" => event.get("[artRegimenSwitch][regimen][#{index}]") }
        artRegimenSwitch << obj
        if (initialArtRegimenSwitchDate.nil? || initialArtRegimenSwitchDate > val)
          initialArtRegimenSwitchDate = val
          initialArtRegimenSwitch = obj
        end
        if (currentArtRegimenSwitchDate.nil? || currentArtRegimenSwitchDate < val)
          currentArtRegimenSwitchDate = val
          currentArtRegimenSwitch = obj
        end
      }
      event.set("[artRegimenSwitch][nested]", artRegimenSwitch)
      event.set("[artRegimenSwitch][initial]", initialArtRegimenSwitch)
      event.set("[artRegimenSwitch][current]", currentArtRegimenSwitch)
    '
    remove_field => [ "[artRegimenSwitch][date]", "[artRegimenSwitch][line]", "[artRegimenSwitch][regimen]" ]
  }

  ruby {
    code => '
      viralSuppression = []
      initialViralSuppression = nil
      initialViralSuppressionDate = nil
      currentViralSuppression = nil
      currentViralSuppressionDate = nil
      viralSuppressionDate = event.get("[viralSuppression][date]")
      return if viralSuppressionDate.nil?
      viralSuppressionDate.each_with_index { |val, index|
        obj = { "date" => val, "result" => event.get("[viralSuppression][result][#{index}]"), "interpretation" => event.get("[viralSuppression][interpretation][#{index}]") }
        viralSuppression << obj
        if (initialViralSuppressionDate.nil? || initialViralSuppressionDate > val)
          initialViralSuppressionDate = val
          initialViralSuppression = obj
        end
        if (currentViralSuppressionDate.nil? || currentViralSuppressionDate < val)
          currentViralSuppressionDate = val
          currentViralSuppression = obj
        end
      }
      event.set("[viralSuppression][nested]", viralSuppression)
      event.set("[viralSuppression][initial]", initialViralSuppression)
      event.set("[viralSuppression][current]", currentViralSuppression)
    '
    remove_field => [ "[viralSuppression][date]", "[viralSuppression][result]", "[viralSuppression][interpretation]" ]
  }

  # translate fhir codes to minimum dataset values
  translate {
    field => "[registration][gender]"
    destination => "[registration][gender]"
    dictionary => {
      "Male" => "male"
      "Female" => "female"
      "Other" => "other"
      "Unknown" => "unknown"
      "male" => "male"
      "female" => "female"
      "other" => "other"
      "unknown" => "unknown"
    }
    exact => true
    override => true
    fallback => "Error"
  }

  prune {
    whitelist_names => [ "registration", "hivDiagnosis", "entryToCare", "artInitiation", "cd4", "artRegimenSwitch", "viralSuppression", "death", "@timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    index => "fhir-report-patient"
    document_id => "%{[@metadata][id]}"
    action => "index"
    user => "elastic"
    password => "dev_password_only"
  }
}
