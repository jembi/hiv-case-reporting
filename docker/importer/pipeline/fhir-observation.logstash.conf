input {
  pipeline {
    address => "fhir-observation"
  }
}

filter {
  # identify resource
  ruby {
    path => "/usr/share/logstash/pipeline/scripts/categorise_by_concept.rb"
    script_params => {
      "source_field" => "[resource][code]"
      "dest_field" => "[@metadata][type]"
      "map" => {
        "HIV-RECENCY-TEST-CONDUCTED" => "HIV-RECENCY-TEST-CONDUCTED"
        "HIV-RECENCY-RESULT" => "HIV-RECENCY-RESULT"
        "CD4-RESULT" => "CD4-RESULT"
        "VL-RESULT" => "VL-RESULT"
        "CAUSE-OF-DEATH" => "CAUSE-OF-DEATH"
      }
    }
  }

  # type specific mappings
  if [@metadata][type] == "HIV-RECENCY-TEST-CONDUCTED" {
    if [resource][valueBoolean] {
      mutate {
        add_field => {
          "[hivDiagnosis][recencyTestConducted]" => "Yes"
        }
      }
    } else {
      mutate {
        add_field => {
          "[hivDiagnosis][recencyTestConducted]" => "No"
        }
      }
    }
  }

  if [@metadata][type] == "HIV-RECENCY-RESULT" {
    if [resource][valueBoolean] {
      mutate {
        add_field => {
          "[hivDiagnosis][recencyStatus]" => "Recent"
        }
      }
    } else {
      mutate {
        add_field => {
          "[hivDiagnosis][recencyStatus]" => "Not Recent"
        }
      }
    }
  }

  if [@metadata][type] == "CD4-RESULT" and [resource][effectiveDateTime] {
    mutate {
      add_field => {
        "[cd4][collectionDate]" => "%{[resource][effectiveDateTime]}"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][component][0][code]"
        "dest_field" => "[@metadata][cd4][component1][code]"
        "system" => "http://snomed.info/sct"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][component][1][code]"
        "dest_field" => "[@metadata][cd4][component2][code]"
        "system" => "http://snomed.info/sct"
      }
    }
    if [@metadata][cd4][component1][code] == "113056008" {
      mutate {
        add_field => {
          "[cd4][result]" => "%{[resource][component][0][valueInteger]}"
        }
      }
    }
    if [@metadata][cd4][component1][code] == "313938009" {
      mutate {
        add_field => {
          "[cd4][percentage]" => "%{[resource][component][0][valueInteger]}"
        }
      }
    }
    if [@metadata][cd4][component2][code] == "113056008" {
      mutate {
        add_field => {
          "[cd4][result]" => "%{[resource][component][1][valueInteger]}"
        }
      }
    }
    if [@metadata][cd4][component2][code] == "313938009" {
      mutate {
        add_field => {
          "[cd4][percentage]" => "%{[resource][component][1][valueInteger]}"
        }
      }
    }
  }

  if [@metadata][type] == "VL-RESULT" and [resource][effectiveDateTime] {
    mutate {
      add_field => {
        "[viralSuppression][date]" => "%{[resource][effectiveDateTime]}"
        "[viralSuppression][result]" => "%{[resource][valueInteger]}"
      }
    }
    # TODO support finding in codeable concept arrays
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][interpretation][0]"
        "dest_field" => "[viralSuppression][interpretation]"
        "system" => "http://openhie.org/fhir/hiv-casereporting/CodeSystem/cs-vl-interpretation"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][interpretation][0]"
        "dest_field" => "[viralSuppression][currentStatus]"
        "system" => "http://openhie.org/fhir/hiv-casereporting/CodeSystem/cs-vl-suppression"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][interpretation][1]"
        "dest_field" => "[viralSuppression][interpretation]"
        "system" => "http://openhie.org/fhir/hiv-casereporting/CodeSystem/cs-vl-interpretation"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][interpretation][1]"
        "dest_field" => "[viralSuppression][currentStatus]"
        "system" => "http://openhie.org/fhir/hiv-casereporting/CodeSystem/cs-vl-suppression"
      }
    }
    # translate fhir codes to minimum dataset values
    translate {
      field => "[viralSuppression][interpretation]"
      destination => "[viralSuppression][interpretation]"
      dictionary => {
        "D" => "Detectable"
        "ND" => "Non Detectable"
        "UNK" => "Unknown"
      }
      exact => true
      override => true
      fallback => "Error"
    }
    translate {
      field => "[viralSuppression][currentStatus]"
      destination => "[viralSuppression][currentStatus]"
      dictionary => {
        "S" => "Suppressed"
        "UNSUP" => "Unsuppressed"
        "UNK" => "Unknown"
      }
      exact => true
      override => true
      fallback => "Error"
    }
  }

  if [@metadata][type] == "CAUSE-OF-DEATH" and [resource][effectiveDateTime] {
    mutate {
      add_field => {
        "[death][date]" => "%{[resource][effectiveDateTime]}"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_codeable_concept.rb"
      script_params => {
        "source_field" => "[resource][valueCodeableConcept]"
        "dest_field" => "[death][cause]"
        "system" => "http://openhie.org/fhir/hiv-casereporting/CodeSystem/cs-vl-causeofdeath"
      }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_extension.rb"
      script_params => {
        "url" => "http://openhie.org/fhir/hiv-casereporting/StructureDefinition/last-clinical-visit"
        "type" => "valueDateTime"
        "source_field" => "[resource][extension]"
        "dest_field" => "[death][dateOfLastVisit]"
      }
    }
    # translate fhir codes to minimum dataset values
    translate {
      field => "[death][cause]"
      destination => "[death][cause]"
      dictionary => {
        "HIV" => "HIV Related"
        "NON-HIV" => "Non HIV related"
      }
      exact => true
      override => true
      fallback => "Error"
    }
  }

  # set document id
  mutate {
    add_field => {
      "subject" => "%{[resource][subject][reference]}"
    }
  }

  mutate {
    gsub => [ "subject", "http://opencr:3000/fhir/", "" ]
  }

  mutate {
    gsub => ["subject", "Patient/", ""]
  }

  mutate {
    add_field => {
      "[@metadata][id]" => "report-patient-%{[subject]}"
    }
  }

  # clean up
  prune {
    whitelist_names => [ "hivDiagnosis", "cd4", "viralSuppression", "death", "@timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    index => "fhir-report-patient"
    document_id => "%{[@metadata][id]}"
    action => "update"
    script => '
      if (ctx._source.hivDiagnosis == null) {
        ctx._source.hivDiagnosis = new HashMap(); 
      }
      if (params.event["hivDiagnosis"] != null && params.event["hivDiagnosis"]["recencyTestConducted"] != null) {
        ctx._source.hivDiagnosis["recencyTestConducted"] = params.event["hivDiagnosis"]["recencyTestConducted"];
      }
      if (params.event["hivDiagnosis"] != null && params.event["hivDiagnosis"]["recencyStatus"] != null) {
        ctx._source.hivDiagnosis["recencyStatus"] = params.event["hivDiagnosis"]["recencyStatus"];
      }
      if (params.event["death"] != null) {
        ctx._source.death = params.event["death"];
      }

      if (ctx._source.cd4 == null) {
        ctx._source.cd4 = new HashMap(); 
      }

      def allCD4Objects = new ArrayList();
      if (ctx._source.cd4.nested != null) {
        allCD4Objects.addAll(ctx._source.cd4.nested);
      }
      if (params.event["cd4"] != null) {
        allCD4Objects.add(params.event["cd4"]);
      }

      allCD4Objects.sort((o1, o2) -> {
        def zdt1;
        try {
          zdt1 = ZonedDateTime.parse(o1.collectionDate);
        } catch (Exception e) {
          zdt1 = LocalDate.parse(o1.collectionDate).atStartOfDay(ZoneOffset.UTC);
        }
        def zdt2;
        try {
          zdt2 = ZonedDateTime.parse(o2.collectionDate);
        } catch (Exception e) {
          zdt2 = LocalDate.parse(o2.collectionDate).atStartOfDay(ZoneOffset.UTC);
        }

        return zdt1.compareTo(zdt2);
      });

      if (allCD4Objects.size() > 0) {
        ctx._source.cd4["nested"] = allCD4Objects;
        ctx._source.cd4["initial"] = allCD4Objects[0];
        ctx._source.cd4["current"] = allCD4Objects[allCD4Objects.size() - 1];
      }

      if (ctx._source.viralSuppression == null) {
        ctx._source.viralSuppression = new HashMap(); 
      }

      def allVLObjects = new ArrayList();
      if (ctx._source.viralSuppression.nested != null) {
        allVLObjects.addAll(ctx._source.viralSuppression.nested);
      }
      if (params.event["viralSuppression"] != null) {
        allVLObjects.add(params.event["viralSuppression"]);
      }

      allVLObjects.sort((o1, o2) -> {
        def zdt1;
        try {
          zdt1 = ZonedDateTime.parse(o1.date);
        } catch (Exception e) {
          zdt1 = LocalDate.parse(o1.date).atStartOfDay(ZoneOffset.UTC);
        }
        def zdt2;
        try {
          zdt2 = ZonedDateTime.parse(o2.date);
        } catch (Exception e) {
          zdt2 = LocalDate.parse(o2.date).atStartOfDay(ZoneOffset.UTC);
        }

        return zdt1.compareTo(zdt2);
      });

      if (allVLObjects.size() > 0) {
        ctx._source.viralSuppression["nested"] = allVLObjects;
        ctx._source.viralSuppression["initial"] = allVLObjects[0];
        ctx._source.viralSuppression["current"] = allVLObjects[allVLObjects.size() - 1];
        ctx._source.viralSuppression["currentStatus"] = allVLObjects[allVLObjects.size() - 1]["currentStatus"];
      }
    '
    doc_as_upsert => true
    user => "elastic"
    password => "dev_password_only"
  }
}
