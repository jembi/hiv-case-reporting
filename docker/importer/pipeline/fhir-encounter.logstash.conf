input {
  pipeline {
    address => "fhir-encounter"
  }
}

filter {
  # HIV diagnosis encounter
  if [resource][class][code] == "PRENC" {
    mutate {
      add_field => {
        "[hivDiagnosis][facilityID]" => "%{[resource][serviceProvider][reference]}"
      }
    }

    mutate {
      gsub => ["[hivDiagnosis][facilityID]", "Organization/", ""]
    }

    elasticsearch {
      hosts => [ "es-analytics:9200" ]
      user => "elastic"
      password => "dev_password_only"
      index => "fhir-raw-organization"
      query => "resource.id:%{[hivDiagnosis][facilityID]}"
      fields => {
        "[resource][address]" => "[@metadata][address]"
        "[resource][name]" => "[hivDiagnosis][facility][name]"
        "[resource][identifier]" => "[@metadata][identifier]"
      }
      add_field => {
        "[hivDiagnosis][facility][country]" => "%{[@metadata][address][0][country]}"
        "[hivDiagnosis][facility][state]" => "%{[@metadata][address][0][state]}"
        "[hivDiagnosis][facility][district]" => "%{[@metadata][address][0][district]}"
        "[hivDiagnosis][facility][city]" => "%{[@metadata][address][0][city]}"
      }
    }

    ruby {
      code => '
        identifiers = event.get("[@metadata][identifier]")
        facilityCode = identifiers.find { |x| x["system"] == "http://test.org/identifier/hiv-organization"}["value"]
        event.set("[hivDiagnosis][hivPosFacilityCode]", facilityCode)
      '
    }

    elasticsearch {
      hosts => [ "es-analytics:9200" ]
      user => "elastic"
      password => "dev_password_only"
      index => "fhir-raw-location"
      query => "resource.identifier.value:%{[hivDiagnosis][hivPosFacilityCode]}"
      fields => {
        "[resource][position]" => "[hivDiagnosis][facility][position]"
      }
      remove_field => ["[hivDiagnosis][facilityID]"]
    }

    mutate {
      rename => {
        "[hivDiagnosis][facility][position][latitude]" => "[hivDiagnosis][facility][position][lat]"
        "[hivDiagnosis][facility][position][longitude]" => "[hivDiagnosis][facility][position][lon]"
      }
    }
  }

  # HIV clinical encounter
  if [resource][class][code] == "OBSENC" {
    mutate {
      add_field => {
        "[entryToCare][dateOfFirstClinicalVisit]" => "%{[resource][period][start]}"
      }
    }
  }

  # set document id
  mutate {
    add_field => {
      "subject" => "%{[resource][subject][reference]}"
    }
  }

  mutate {
    gsub => [ "subject", "http://opencr:3000/fhir/", "" ]
  }

  mutate {
    gsub => ["subject", "Patient/", ""]
  }

  mutate {
    add_field => {
      "[@metadata][id]" => "report-patient-%{[subject]}"
    }
  }

  # clean up
  prune {
    whitelist_names => [ "hivDiagnosis", "entryToCare", "@timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    index => "fhir-report-patient"
    document_id => "%{[@metadata][id]}"
    action => "update"
    script => '
      if (params.event["entryToCare"] != null) {
        if (ctx._source.entryToCare != null) {
          def incomingDate = params.event["entryToCare"]["dateOfFirstClinicalVisit"];
          def existingDate = ctx._source.entryToCare.dateOfFirstClinicalVisit;

          if (incomingDate != null && existingDate != null) {
            if (ZonedDateTime.parse(incomingDate).isAfter(ZonedDateTime.parse(existingDate))) {
              params.event["entryToCare"]["dateOfFirstClinicalVisit"] = existingDate;
            }
          }
          
        } else {
          ctx._source.entryToCare = new HashMap();
        }

        for (entry in params.event["entryToCare"].entrySet()) {
          ctx._source.entryToCare[entry.getKey()] = entry.getValue();
        }
      }

      if (params.event["hivDiagnosis"] != null) {
        for (entry in params.event["hivDiagnosis"].entrySet()) {
          ctx._source.hivDiagnosis[entry.getKey()] = entry.getValue();
        }
      }
    '
    doc_as_upsert => true
    user => "elastic"
    password => "dev_password_only"
  }
}
