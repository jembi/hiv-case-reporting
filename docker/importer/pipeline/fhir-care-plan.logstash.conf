input {
  pipeline {
    address => "fhir-care-plan"
  }
}

filter {
  # identify resource
  ruby {
    path => "/usr/share/logstash/pipeline/scripts/categorise_by_concept.rb"
    script_params => {
      "source_field" => "[resource][activity][0][detail][code]"
      "dest_field" => "[@metadata][type]"
      "map" => {
        "45260-7" => "ART"
      }
    }
  }

  # type specific mappings
  if [@metadata][type] == "ART" and [resource][period][start] {
    mutate {
      add_field => {
        "[art][date]" => "%{[resource][period][start]}"
        "[art][regimen]" => "%{[resource][activity][0][detail][productCodeableConcept][coding][0][code]}"
      }
    }

    # get extensions
    ruby {
      path => "/usr/share/logstash/pipeline/scripts/get_extension.rb"
      script_params => {
        "url" => "http://openhie.org/fhir/hiv-casereporting/StructureDefinition/art-regimen-line"
        "type" => "valueCodeableConcept"
        "source_field" => "[resource][activity][0][detail][extension]"
        "dest_field" => "[@metadata][line]"
      }
      add_field => {
        "[art][line]" => "%{[@metadata][line][coding][0][code]}"
      }
    }

    # translate fhir codes to minimum dataset values
    translate {
      field => "[art][line]"
      destination => "[art][line]"
      dictionary => {
        "FIRST-LINE" => "First Line"
        "SECOND-LINE" => "Second Line"
        "THIRD-LINE" => "Third Line"
        "SPECIAL-UNKNOWN" => "Special/Unknown"
      }
      exact => true
      override => true
      fallback => "Error"
    }
  }

  # set document id
  mutate {
    add_field => {
      "subject" => "%{[resource][subject][reference]}"
    }
  }

  mutate {
    gsub => [ "subject", "http://opencr:3000/fhir/", "" ]
  }

  mutate {
    gsub => ["subject", "Patient/", ""]
  }

  mutate {
    add_field => {
      "[@metadata][id]" => "report-patient-%{[subject]}"
    }
  }

  # clean up
  prune {
    whitelist_names => [ "hivDiagnosis", "art", "@timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => [ "es-analytics:9200" ]
    index => "fhir-report-patient"
    document_id => "%{[@metadata][id]}"
    action => "update"
    script => '
      if (ctx._source.artRegimenSwitch == null) {
        ctx._source.artRegimenSwitch = new HashMap(); 
      }

      def allArtObjects = new ArrayList();
      if (ctx._source.artRegimenSwitch.nested != null) {
        allArtObjects.addAll(ctx._source.artRegimenSwitch.nested);
      }
      if (ctx._source.artInitiation != null) {
        allArtObjects.add(ctx._source.artInitiation);
      }
      if (params.event["art"] != null) {
        allArtObjects.add(params.event["art"]);
      }

      allArtObjects.sort((o1, o2) -> {
        def zdt1;
        try {
          zdt1 = ZonedDateTime.parse(o1.date);
        } catch (Exception e) {
          zdt1 = LocalDate.parse(o1.date).atStartOfDay(ZoneOffset.UTC);
        }
        def zdt2;
        try {
          zdt2 = ZonedDateTime.parse(o2.date);
        } catch (Exception e) {
          zdt2 = LocalDate.parse(o2.date).atStartOfDay(ZoneOffset.UTC);
        }

        return zdt1.compareTo(zdt2);
      });

      if (allArtObjects.size() > 0) {
        ctx._source.artInitiation = allArtObjects[0];
      }
      if (allArtObjects.size() > 1) {
        ctx._source.artRegimenSwitch["nested"] = allArtObjects.subList(1, allArtObjects.size());
        ctx._source.artRegimenSwitch["initial"] = allArtObjects[1];
        ctx._source.artRegimenSwitch["current"] = allArtObjects[allArtObjects.size() - 1];
      }
    '
    doc_as_upsert => true
    user => "elastic"
    password => "dev_password_only"
  }
}
